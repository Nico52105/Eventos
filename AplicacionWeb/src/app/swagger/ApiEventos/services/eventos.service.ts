/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiEventosCrearEventoPost } from '../fn/eventos/api-eventos-crear-evento-post';
import { ApiEventosCrearEventoPost$Params } from '../fn/eventos/api-eventos-crear-evento-post';
import { apiEventosEditarEventoPost } from '../fn/eventos/api-eventos-editar-evento-post';
import { ApiEventosEditarEventoPost$Params } from '../fn/eventos/api-eventos-editar-evento-post';
import { apiEventosEliminarEventoPost } from '../fn/eventos/api-eventos-eliminar-evento-post';
import { ApiEventosEliminarEventoPost$Params } from '../fn/eventos/api-eventos-eliminar-evento-post';
import { apiEventosMisEventosGet } from '../fn/eventos/api-eventos-mis-eventos-get';
import { ApiEventosMisEventosGet$Params } from '../fn/eventos/api-eventos-mis-eventos-get';
import { apiEventosObtenerEventosGet$Json } from '../fn/eventos/api-eventos-obtener-eventos-get-json';
import { ApiEventosObtenerEventosGet$Json$Params } from '../fn/eventos/api-eventos-obtener-eventos-get-json';
import { apiEventosObtenerEventosGet$Plain } from '../fn/eventos/api-eventos-obtener-eventos-get-plain';
import { ApiEventosObtenerEventosGet$Plain$Params } from '../fn/eventos/api-eventos-obtener-eventos-get-plain';
import { ContratoEventoListRespuestaGeneral } from '../models/contrato-evento-list-respuesta-general';

@Injectable({ providedIn: 'root' })
export class EventosService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiEventosObtenerEventosGet()` */
  static readonly ApiEventosObtenerEventosGetPath = '/api/Eventos/ObtenerEventos';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEventosObtenerEventosGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventosObtenerEventosGet$Plain$Response(params?: ApiEventosObtenerEventosGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ContratoEventoListRespuestaGeneral>> {
    return apiEventosObtenerEventosGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEventosObtenerEventosGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventosObtenerEventosGet$Plain(params?: ApiEventosObtenerEventosGet$Plain$Params, context?: HttpContext): Observable<ContratoEventoListRespuestaGeneral> {
    return this.apiEventosObtenerEventosGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ContratoEventoListRespuestaGeneral>): ContratoEventoListRespuestaGeneral => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEventosObtenerEventosGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventosObtenerEventosGet$Json$Response(params?: ApiEventosObtenerEventosGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ContratoEventoListRespuestaGeneral>> {
    return apiEventosObtenerEventosGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEventosObtenerEventosGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventosObtenerEventosGet$Json(params?: ApiEventosObtenerEventosGet$Json$Params, context?: HttpContext): Observable<ContratoEventoListRespuestaGeneral> {
    return this.apiEventosObtenerEventosGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ContratoEventoListRespuestaGeneral>): ContratoEventoListRespuestaGeneral => r.body)
    );
  }

  /** Path part for operation `apiEventosMisEventosGet()` */
  static readonly ApiEventosMisEventosGetPath = '/api/Eventos/MisEventos';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEventosMisEventosGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventosMisEventosGet$Response(params?: ApiEventosMisEventosGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEventosMisEventosGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEventosMisEventosGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventosMisEventosGet(params?: ApiEventosMisEventosGet$Params, context?: HttpContext): Observable<void> {
    return this.apiEventosMisEventosGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEventosCrearEventoPost()` */
  static readonly ApiEventosCrearEventoPostPath = '/api/Eventos/CrearEvento';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEventosCrearEventoPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEventosCrearEventoPost$Response(params?: ApiEventosCrearEventoPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEventosCrearEventoPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEventosCrearEventoPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEventosCrearEventoPost(params?: ApiEventosCrearEventoPost$Params, context?: HttpContext): Observable<void> {
    return this.apiEventosCrearEventoPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEventosEditarEventoPost()` */
  static readonly ApiEventosEditarEventoPostPath = '/api/Eventos/EditarEvento';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEventosEditarEventoPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEventosEditarEventoPost$Response(params?: ApiEventosEditarEventoPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEventosEditarEventoPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEventosEditarEventoPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEventosEditarEventoPost(params?: ApiEventosEditarEventoPost$Params, context?: HttpContext): Observable<void> {
    return this.apiEventosEditarEventoPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEventosEliminarEventoPost()` */
  static readonly ApiEventosEliminarEventoPostPath = '/api/Eventos/EliminarEvento';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEventosEliminarEventoPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventosEliminarEventoPost$Response(params?: ApiEventosEliminarEventoPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEventosEliminarEventoPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEventosEliminarEventoPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventosEliminarEventoPost(params?: ApiEventosEliminarEventoPost$Params, context?: HttpContext): Observable<void> {
    return this.apiEventosEliminarEventoPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
